from aiogram import types, Dispatcher
from aiogram.types import CallbackQuery, MediaGroup, InputMediaDocument
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from text import *
from keyboards import * 
from database import *
import re
import asyncio
import datetime

async def cmdStart(message: types.Message):
    print(message.from_user.id)
    await sql_add_scheduled_mailing(message.from_user.id)
    await bot.send_chat_action(chat_id=message.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v2.1.mp4", "rb") as video_file:
        await bot.send_video(message.from_user.id, video_file)
    await message.answer(text=welcomeMessage)
    await message.answer(text="–ü–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å ¬´–ó–∏–º–Ω–∏–π –ø—Ä–æ–∫–∞—á¬ª?", reply_markup=secondKeyboard)

async def yesAnswer(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–û—Ç–ª–∏—á–Ω–æ, –ª–æ–≤–∏ –æ—Ç –Ω–∞—Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ–¥–Ω–∏–º–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")
    await bot.send_chat_action(chat_id=callback_query.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v2.2.mp4", "rb") as video_file:
        await bot.send_video(callback_query.from_user.id, video_file, width=720, height=1200)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ.", reply_markup=urlKeyboard)

async def noAnswer(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–µ—Ö–∞—Ç—åüòî –¢–æ–≥–¥–∞ –∂–¥–µ–º —Ç–µ–±—è –Ω–∞ –æ–¥–∏–Ω –∏–∑ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤.\n–ê –ø–æ–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–µ–∑–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–Ω–∏–º–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. ")
    await bot.send_chat_action(chat_id=callback_query.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v2.2.mp4", "rb") as video_file:
        await bot.send_video(callback_query.from_user.id, video_file, width=720, height=1200)



async def mailing():
    while True:
        try:
            current_time = datetime.datetime.now()
            users_data = await sql_read_scheduled_mailing()  
            
            for user_data in users_data:
                user_id, launch_time, flag = user_data
                launch_datetime = datetime.datetime.strptime(launch_time, "%Y-%m-%d %H:%M:%S")
                
                if current_time - launch_datetime >= datetime.timedelta(days=1) and flag == 0: #days=1
                    try:
                        await bot.send_message(chat_id=user_id, text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—Ç–∏–º –≤–∞—Å –∑–∞—Ä—è–¥–∏—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –∏–Ω—Ç–µ–Ω—Å–∏–≤ ¬´–ó–∏–º–Ω–∏–π –ø—Ä–æ–∫–∞—á 2024¬ª.")
                        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
                        with open("v2.3.mp4", "rb") as video_file:
                            await bot.send_video(user_id, video_file, width=1200, height=720)
                        #flag==1
                        await sql_update1_scheduled_mailing(user_id)
                        #await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    except:
                        await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                
                if current_time - launch_datetime >= datetime.timedelta(days=7) and flag == 1: #days=1
                    try:
                        await bot.send_message(chat_id=user_id, text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—Ä—è–∂–∞—Ç—å –≤–∞—Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤ ¬´–ó–∏–º–Ω–∏–π –ø—Ä–æ–∫–∞—á 2024¬ª.")
                        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
                        with open("v2.4.mp4", "rb") as video_file:
                            await bot.send_video(user_id, video_file, width=720, height=1200)
                        #flag==2
                        await sql_update2_scheduled_mailing(user_id)
                        #await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    except:
                        await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

                if current_time >= datetime.datetime(2023,12,1) and flag == 2: #days=1
                    try:
                        await bot.send_message(chat_id=user_id, text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—Ä—è–∂–∞—Ç—å –≤–∞—Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤ ¬´–ó–∏–º–Ω–∏–π –ø—Ä–æ–∫–∞—á 2024¬ª.")
                        await bot.send_chat_action(chat_id=user_id, action=types.ChatActions.UPLOAD_VIDEO)
                        with open("v2.5.mp4", "rb") as video_file:
                            await bot.send_video(user_id, video_file, width=1200, height=720)
                        await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    except:
                        await sql_remove_scheduled_mailing(user_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(3600) #3600 # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        except:
            pass

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmdStart, commands=['start'])
    dp.register_callback_query_handler(yesAnswer, lambda c: c.data == "yes")
    dp.register_callback_query_handler(noAnswer, lambda c: c.data == "no")
